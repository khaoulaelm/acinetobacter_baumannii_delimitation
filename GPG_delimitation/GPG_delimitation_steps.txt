# Gene per gene delimitation steps

The primary objective is to perform a gene per gene delimitation to classify bacterial strains more accurately using variations of genes in the core genome. This approach utilizes the variations founf in different genes to infer species boundaries.

### Step 1: Core genes extraction 

The first step is to extract core genes, which are present in all strains of our dataset. Core genes are those genes present in all strains in our dataset. we use the gene_presence_absence.csv file generated by Roary to identify these genes.
To do this, run the extract_core_gene_sequences.py script.
This script processes the gene_presence_absence.csv file, checks which genes are present in all 47 strains, and then extracts their corresponding sequences into individual FASTA files.

### Step 2: Aligning core genes

Once the core genes are extracted, the next step is to perform a multiple sequence alignment (MSA) of each core gene. we use MAFFT alignment tool.
To perform the alignmet, run the align_core_genes.py script.

### Step 3: Run ABGD

Now that the core genes are aligned, we can use ABGD to partition the strains based on genetic distances.
To run ABGD, use the abgd.py script.

### Step 4: Run ASAP

ASAP is another method that helps refine the species delimitation process by partitioning the strains into groups based on their genetic distances. 
To run ASAP, use the asap.py script.

### Step 5: Generate partition matrices

For each gene, we will create partition matrices that reflect how strains are grouped based on ABGD and ASAP results.
For each gene, we generate a matrix where: 
* 1 represents strains in the same group.
* 0 represents strains in different groups.

For ABGD: Run the abgd_partitions.py script.
For ASAP: Run the asap_partitions.py script. The failed genes in this context are the genes that ASAP identified as having all strains grouped into one single group. When creating partition matrices for each gene, for failed genes, the matrix would be filled with 1's because all strains are considered as part of the same group. This means that every pair of strains for those failed genes will be classified as in the same group. For these, run the asap_partitions_failed_genes.py script.

### Step 6: Conspecificity matrix

After creating the partition matrices for each gene,we combine them to form the conspecificity matrix. The conspecificity matrix gives us an overall view of how many times two strains were grouped together across all genes.
For ABGD, run the abgd_conspecificity_matrix.py script.
For ASAP, run the asap_conspecificity_matrix.py script.

### Step7: Heatmap visualization 

Finally, to visualize the conspecificity matrix, we generate a heatmap. 
For ABGD, run the abgd_heatmap.py script.
For ASAP, run the asap_heatmap.py script.
