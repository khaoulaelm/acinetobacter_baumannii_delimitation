# Gene per gene delimitation steps

The primary objective of gene per gene delimitation is to improve the classification of bacterial strains by examining the genetic variations in each core gene individually. By doing this, we aim to define species boundaries more accurately and better understand strain-level diversity. This approach contrasts with traditional methods that typically rely on a single gene marker like 16S rRNA.

### Step 1: Core genes extraction 

The first step is to identify and extract the core genes, which are genes that are present in all strains of our dataset. These genes represent a highly conserved part of the genome and are essential for accurate species delimitation. we use the gene_presence_absence.csv file generated by Roary to identify these genes.
To do this, execute the extract_core_gene_sequences.py script to automate this extraction process. This script processes the gene_presence_absence.csv file, checks which genes are present in all 47 strains, and then extracts their corresponding sequences into individual FASTA files.

### Step 2: Aligning core genes

Once the core genes are extracted, the next step is to perform a multiple sequence alignment (MSA) of each core gene. we use MAFFT alignment tool, a widely used tool for MSA, because it performs well even with large datasets and divergent sequences.
To perform the alignmet, execute the align_core_genes.py script. This will produce aligned FASTA files for each core gene, which will be used in the next step for delimitation.

### Step 3: Run ABGD

Now that the core genes are aligned, we can use ABGD to partition the strains based on genetic distances.
To run ABGD, execute the abgd.py script. The script will automatically run ABGD on each aligned core gene and store the partition results.

### Step 4: Run ASAP

ASAP is another method that helps refine the species delimitation process by partitioning the strains into groups based on their genetic distances. 
To run ASAP, execute the asap.py script. ASAP will produce partition files for each gene, which will be used in subsequent steps to generate partition matrices.

During the analysis, if ABGD or ASAP fails to process a gene, the failed gene name will be added to the failed_genes.txt file. Genes may fail for several reasons, such as poor alignment, insufficient variation, or technical issues with the analysis. By logging them, you can either retry processing with modified parameters or decide to exclude them from further analysis.

### Step 5: Generate partition matrices

The goal of generating partition matrices is to represent how the strains are grouped by ABGD and ASAP for each gene.

For each gene, we create a matrix where each cell represents a pair strains. A value of 1 indicates that the two strains are in the same group, while 0 indicates that they are in different groups.
Execute the abgd_partitions.py and the asap_partitions.py scripts to generate the partition matrices based on ABGD and ASAP, respectively.

### Step 6: Conspecificity matrix

The conspecificity matrix is a summary matrix that aggregates the partition matrices from all genes.
After creating the partition matrices for each gene,we combine them to form the conspecificity matrix. The conspecificity matrix gives us an overall view of how many times two strains were grouped together across all genes. Execute the abgd_conspecificity_matrix.py and the asap_conspecificity_matrix.py scripts to generate the conspecificity matrices for ABGD and ASAP results.

### Step7: Heatmap visualization 

Visualizing the conspecificity matrix as a heatmap provides a clear and intuitive way to understand the relationships between strains.

A heatmap visualizes the conspecificity matrix by coloring the cells according to the values. This allows us to easily identify which strains are grouped together and how often, across different genes and methods. By clustering the strains based on their conspecificity, the heatmap highlights strains that share more similarities in their genetic makeup.
Execute the abgd_heatmap.py and asap_heatmap.py scripts to generate heatmaps for ABGD and ASAP conspecificity matrices. You will get a heatmap that visually represents the conspecificity matrix for both methods, making it easier to interpret the relationships between strains.


By following these steps, we use gene per gene delimitation to more accurately classify bacterial strains based on the variations in core genes. This approach integrates ABGD and ASAP methods, and by generating partition matrices and a conspecificity matrix, we gain deeper insights into strain relationships. Finally, visualizing these relationships through heatmaps helps interpret the data in an intuitive and meaningful way.

