# Gene per gene delimitation steps

The primary objective is to perform a gene per gene delimitation to classify bacterial strains more accurately using variations of genes in the core genome. This approach utilizes the variations founf in different genes to infer species boundaries.

### Step 1: Core genes extraction 

This step focuses on identifying core genes, which are present in all strains of your dataset. Core genes are those genes present in all 47 strains in our dataset. we use the gene_presence_absence.csv file generated by Roary to identify these genes.

to do this step you can run the script extract_core_gene_sequences.py

### Step 2: Aligning core genes:

Once the core genes are extracted, the next step is to perform a multiple sequence alignment (MSA) of each core gene. we use MAFFT alignment tool.

to do this step you can run the script align_core_genes.py

### Step 3: Run ABGD
use the script abgd.py 

### Step 4: Run ASAP
use the script asap.py

### Step 5: Generate partition matrices
we generate partition matrices for each gene, which reflect how strains are grouped based on ABGD and ASAP results.
Fore each gene: 
1 if the strains are in the same group and 0 if they are in different groups.
use the script abgd_partitions.py for ABGD and asap_partitions.py for ASAP.
For ASAP, the failed genes in this context are not just the ones that ASAP couldn't process, but rather the genes that ASAP identified as having all strains grouped into one single group.
For failed genes, we proceed by treating all strains as one group for those genes. When creating partition matrices for each gene, for failed genes, the matrix would be filled with 1's because all strains are considered as part of the same group. This means that every pair of strains for those failed genes will be classified as in the same group. For genes where ASAP successfully found multiple groups, the matrix will have a 1 if two strains are in the same group, and a 0 if they are not. to do that just run the script asap_partitions_failed_genes.py

### Step 6: Conspecificity matrix
After creating the partition matrices for each gene,we combined them to form the conspecificity matrix. The conspecificity matrix will therefore give us an overall view of how many times two strains were grouped together across all genes.
to do this step run asap_conspecificity_matrix.py for ASAP analysis and abgd_conspecificity_matrix.py for ABGD analysis.

### Step7: Heatmap visualization 
To visualize the results, a heatmap can be created from the conspecificity matrix. run abgd_heatmap.py and asap_heatmap.py
